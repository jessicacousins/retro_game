const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

const critterImg = new Image();
critterImg.src = "critter.png";
const meteorImg = new Image();
meteorImg.src = "meteor.png";
const starImg = new Image();
starImg.src = "star.png";

let critter = { x: 180, y: 540, width: 32, height: 32, speed: 6, dx: 0 };
let meteors = [],
  stars = [],
  shields = [];
let score = 0,
  bestScore = localStorage.getItem("bestScore") || 0;
let isGameOver = false;
let hasShield = false;
let shieldTimer = 0;
let currentZone = 1;

document.getElementById("best").textContent = bestScore;

// sounds generated by AI or free sound libraries from Pixabay
const bgm = document.getElementById("bgm");
const pickup = document.getElementById("pickup");
const hit = document.getElementById("hit");
const shieldSound = document.getElementById("shieldSound");
bgm.volume = 0.5;
bgm.play();

function drawCritter() {
  ctx.drawImage(
    critterImg,
    critter.x,
    critter.y,
    critter.width,
    critter.height
  );
  if (hasShield) {
    ctx.strokeStyle = "cyan";
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.arc(critter.x + 16, critter.y + 16, 20, 0, Math.PI * 2);
    ctx.stroke();
  }
}

function drawMeteor(m) {
  ctx.drawImage(meteorImg, m.x, m.y, m.size, m.size);
}
function drawStar(s) {
  ctx.drawImage(starImg, s.x, s.y, s.size, s.size);
}
function drawShield(s) {
  ctx.fillStyle = "rgba(0,255,255,0.5)";
  ctx.beginPath();
  ctx.arc(s.x + 10, s.y + 10, 10, 0, Math.PI * 2);
  ctx.fill();
}

function isColliding(a, b) {
  return (
    a.x < b.x + b.size &&
    a.x + a.width > b.x &&
    a.y < b.y + b.size &&
    a.y + a.height > b.y
  );
}

function moveCritter() {
  critter.x += critter.dx;
  if (critter.x < 0) critter.x = 0;
  if (critter.x + critter.width > canvas.width)
    critter.x = canvas.width - critter.width;
}

function updateZone() {
  const body = document.body;
  if (score > 2000 && currentZone < 3) {
    body.style.background = "radial-gradient(circle, #1b0033, #440044)";
    currentZone = 3;
  } else if (score > 1000 && currentZone < 2) {
    body.style.background = "radial-gradient(circle, #003344, #002222)";
    currentZone = 2;
  }
}

function updateGame() {
  if (isGameOver) return;

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  moveCritter();
  drawCritter();

  meteors.forEach((m) => {
    m.y += m.speed;
    drawMeteor(m);
    if (isColliding(critter, m)) {
      if (hasShield) {
        hasShield = false;
      } else {
        hit.play();
        endGame();
      }
    }
  });

  stars.forEach((s, i) => {
    s.y += s.speed;
    drawStar(s);
    if (isColliding(critter, s)) {
      pickup.play();
      score += 10;
      stars.splice(i, 1);
    }
  });

  shields.forEach((s, i) => {
    s.y += s.speed;
    drawShield(s);
    if (isColliding(critter, s)) {
      hasShield = true;
      shieldTimer = Date.now();
      shieldSound.play();
      shields.splice(i, 1);
    }
  });

  meteors = meteors.filter((m) => m.y < canvas.height);
  stars = stars.filter((s) => s.y < canvas.height);
  shields = shields.filter((s) => s.y < canvas.height);

  if (Math.random() < 0.035)
    meteors.push({
      x: Math.random() * 368,
      y: -20,
      size: 32,
      speed: 3 + score / 100,
    });

  if (Math.random() < 0.015)
    stars.push({ x: Math.random() * 368, y: -20, size: 20, speed: 2 });

  if (Math.random() < 0.002)
    shields.push({ x: Math.random() * 368, y: -20, size: 20, speed: 2 });

  if (hasShield && Date.now() - shieldTimer > 7000) {
    hasShield = false;
  }

  updateZone();
  score++;
  document.getElementById("score").textContent = score;
  requestAnimationFrame(updateGame);
}

function endGame() {
  isGameOver = true;
  if (score > bestScore) {
    localStorage.setItem("bestScore", score);
    document.getElementById("best").textContent = score;
  }
  setTimeout(() => {
    alert("ðŸ’¥ Game Over! Final score: " + score);
  }, 100);
}

// keyboard movement
document.addEventListener("keydown", (e) => {
  if (e.key === "ArrowLeft") critter.dx = -critter.speed;
  if (e.key === "ArrowRight") critter.dx = critter.speed;
});
document.addEventListener("keyup", (e) => {
  if (e.key === "ArrowLeft" || e.key === "ArrowRight") critter.dx = 0;
});

// touch swipe (for mobile)
let touchStartX = null;
canvas.addEventListener("touchstart", (e) => {
  touchStartX = e.changedTouches[0].clientX;
});
canvas.addEventListener("touchend", (e) => {
  const deltaX = e.changedTouches[0].clientX - touchStartX;
  if (deltaX > 30) critter.dx = critter.speed;
  else if (deltaX < -30) critter.dx = -critter.speed;
  setTimeout(() => (critter.dx = 0), 150);
});

// restart
document.getElementById("restartBtn").onclick = () => {
  score = 0;
  isGameOver = false;
  critter.x = 180;
  meteors = [];
  stars = [];
  shields = [];
  hasShield = false;
  bgm.play();
  updateGame();
};

updateGame();
